go 協程特點

有獨立的棧空間
共享程序堆空間
調度由用戶(工程師)控制
協程是輕量級的線程 (編譯器做優化)



主線程退出(結束) 其他協程也會退出(結束)

主線程是一個物理線程 直接作用在cpu上 重量級 非常消耗資源

go 協程調度模型
MPG模式
M: 作業系統的主線程(一個進程一定會有一個主線程)
P: 協程執行需要的上下文
G: 協程


// 這部分還不太了解
「線程池」

go 跟 swoole 有點像在協程的部分
如果當前協程正在做 I/O 會讓出cpu執行權 讓其他協程能繼續工作
這樣可以避免阻塞 能真的發揮cpu效用 直到 I/O 操作完畢才會進到作業系統的排程
進而能夠進入cpu 繼續工作

並且 切換 進程 線程 協程 消耗資源與時間的程度不同 協程消耗最少


併行: 假設今天有三件事情要做 且都在同一個 cpu 上執行
併發: 架設今天有三件事情要做 且都在不同個 cpu 上執行 (例如四核心 cpu)




不同 go routine 之間如何通訊
1. 全局互斥鎖
2. channel